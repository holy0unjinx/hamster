generator client {
  provider = "prisma-client-js"
    output   = "./node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                Int                @id @default(autoincrement())
  studentNumber     Int                @unique
  passwordHash      String
  grade            Int
  class            Int
  number           Int
  name             String
  activated        Boolean            @default(false)
  createdAt        DateTime          @default(now()) @map("created_at")
  lastLogin        DateTime?         @map("last_login")
  notifications    Notification[]
  pushSubscriptions PushSubscription[]

  @@index([grade, class], name: "idx_student_grade_class")
}

model Teacher {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  passwordHash    String   @map("password_hash")
  name            String
  subjectId       Int      @map("subject_id")  // 추가된 필드
  subject         Subject  @relation(fields: [subjectId], references: [id])  // 관계 설정
  teachersOffice  Int?  @map("teachers_office")
  homeroomClass   Int?  @map("homeroom_class")
  createdAt       DateTime @default(now()) @map("created_at")
}

model Schedule {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  startDate   DateTime  @map("start_date")
  endDate     DateTime  @map("end_date")
  createdAt   DateTime  @default(now()) @map("created_at")
}

model Subject {
  id                    Int                     @id @default(autoincrement())
  subjectName          String                  @map("subject_name")
  grade                Int
  performanceAssessments Assessment[]
  Teacher                Teacher[]
}

model Assessment {
  id              Int               @id @default(autoincrement())
  subjectId       Int              @map("subject_id")
  title           String
  description     String?
  maxScore        Float            @map("max_score")
  subject         Subject          @relation(fields: [subjectId], references: [id])
}

model Notification {
  id           Int      @id @default(autoincrement())
  studentId    Int      @map("student_id")
  title        String
  content      String
  isRead       Boolean  @default(false) @map("is_read")
  createdAt    DateTime @default(now()) @map("created_at")
  student      Student  @relation(fields: [studentId], references: [id])

  @@index([studentId, isRead], name: "idx_notifications_student_read")
}

model PushSubscription {
  id          Int      @id @default(autoincrement())
  studentId   Int      @map("student_id")
  endpoint    String
  p256dh      String
  auth        String
  createdAt   DateTime @default(now()) @map("created_at")
  student     Student  @relation(fields: [studentId], references: [id])

  @@index([studentId], name: "idx_push_subscriptions_student")
}

model TokenBlacklist {
  token           String    @unique
  expires_at      DateTime
  invalidated_at  DateTime  @default(now())
}

